=====================================
Django 1.1 ベータ 1 リリースノート
=====================================

:revision-up-to: 17812 (1.4) 

March 23, 2009

Django 1.1 ベータ1へようこそ!

これは現在のところ2009年4月1日に予定されているDjango 1.1最終リリース前の
一連のプレビュー/開発リリースにおける２番目のリリースです。
このリリースはおもに新機能を試用に興味がある開発者や、Djangoコードベースを
テストして最終1.1リリース前にバグを見つけたり解決する開発のためのものです。

ということで、このリリースは本番試用を意図したもの *ではない* ですし、
そのように使わないでください。

Django 1.1 ベータ1 での新機能
===============================

.. seealso::

    :doc:`1.1 アルファリリースノート</releases/1.1-alpha-1>`, では
    Django 1.0 と Django 1.1 アルファの間の新機能を一覧しています。


モデルの改良
------------------

.. currentmodule:: django.db.models

Django のモデル層に多くの機能が追加されました。

"非管理(Unmanaged)" モデル
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Djangoが :attr:`~Options.managed` モデルオプションを使っているモデルの
データベーステーブルを作るか作らないかをコントロールできるようになりました。
デフォルトは ``True`` で、この場合、 Djangoは :djadmin:`syncdb` の時に適切な
データベーステーブルを作成し、 :djadmin:`reset` コマンドでは削除します。
つまり、 Djangoはデータベーステーブルのライフサイクルを *管理(manage)* 
します。

これを ``False`` にセットすると、このモデルに関してはデータベーステーブルの
作成、削除が自動的には行われません。 これは別の方法で既に作成されている
データベーステーブルやデータベースビューを表現するモデルには便利です。


詳細は :attr:`~Options.managed` オプションのドキュメント参照してください。

プロキシ(Proxy)モデル
~~~~~~~~~~~~~~~~~~~~~~~~

既存のモデルを :ref:`proxy models <proxy-models>`: でサブクラスすれば、
Pythonの動作だけを追加し、新規にテーブルを作成しないことが可能になりました。
つまり、実際のデータの全てを保持している潜在的なモデルに対する *プロキシ* 
として振る舞う新しいモデルです。

詳細に関しては `proxy models documentation <proxy-models>` に全て記載されて
います。この機能は表面的には非管理モデルと同じで、 
:ref:`非管理モデルとプロキシモデルの違い <proxy-vs-unmanaged-models>` に
説明が記載されています。

延期フィールド(Deferred fields)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

複雑な状況によっては、多量のデータ(例えば、巨大なテキストフィールド)を
含んだフィールドがモデルにあったり、あるいは Python オブジェクトに変換する
のに多大な処理を必要とすることがあります。このような特定のフィールドが
不要であれば、Djangoがデータベースからそれらを取得しないようにさせること
が出来るようになりました。

この新しいクエリセットメソッドに関しては
:meth:`~django.db.models.query.QuerySet.defer` と
:meth:`~django.db.models.query.QuerySet.only` を使うことができます。

新しいadmin機能
------------------

1.1アルファから Djangoの admin アプリケーションにいくつかの新機能が追加さ
れています。

変更リストでの編集可能フィールド
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

新しい :ref:`list_editable <admin-list-editable>` admin オプションにより、
admin リストビューでフィールドが編集可能になります。このようなフィールドは
一覧ページでフォームウィジェットとして現れるので、一度に編集と保存が可能
です。

Admin "アクション(actions)"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:doc:`admin アクション </ref/contrib/admin/actions>` を定義することで、
モデルのグループに対して一度に同じアクションを起こすことが可能になりました。
ユーザーは変更一覧ページにあるオブジェクトを選択してこれらのアクションを選択
された全てのオブジェクトに対して適用することができます。

Django では定義済み admin アクションとしてオブジェクトグループを一撃に削除
することができます。

テストの改良
--------------------

.. currentmodule:: django.test.client

:doc:`テスティングフレームワーク </topics/testing>` に対しては、 小さいけれ
ども非常に便利な改善が行われています :

* テスト :class:`Client` は ``follow`` 引数により自動的に :meth:`Client.get` 
  と :meth:`Client.post` へのリダイレクトに従うようにすることができます。
  これによりビューのテストのリダイレクトの発行を簡単にすることができます。

* 応答のテンプレートコンテキストで、テストクライアントを簡単に返せるように
  なりました:  ``request.context[key]`` としてコンテキストにアクセスする
  だけです。 古いやり方では、レンダされるそれぞれのテンプレートごとに
  コンテキストのリストとして ``requeset.context`` を扱いますが、必要であれは
  これも引き続き使うことが出来ます。

条件付きビュー処理
---------------------------

:doc:`条件付きビュー処理 </topics/conditional-view-processing>` のサポート
に関しては標準的な ``ETag`` と ``Last-Modified`` HTTPヘッダーをを使うことが
出来るようにだいぶ改善されました。 つまり、これまでより軽い条件確認で、
ビューの処理を短縮さすることができます。多くのビューではスピード改善と
バンド幅の縮小をかなり改善することが可能です。

その他の改善
------------------

最後に様々なすばらしい機能がこのベータリリースまでに行われています:

* :djadmin:`dumpdata` 管理コマンドはモデル名を引数として受け付けるように
  なったので、特定のモデルだけのデータをエクスポートすることが可能です。

* :tfilter:`safeseq` テンプレートフィルタが :tfilter:`safe` と同様に
  リストに対して使えるようになったので、リストの個々のアイテムをsafe
  (HTMLエスケープしない)にすることができます。

* :doc:`キャシュバックエンド </topics/cache>` では ``incr()`` と
  ``decr()`` コマンドがサポートされたので、キャシュキーの値の増減が可能
  です。キャッシュバックエンド -- 最も重要な memcached バックエンドで --
  アトミックな増加/減少がサポートされているので、これらの操作がアトミック
  でしかもかなり高速です。

* Djangoは標準的な ``REMOTE_USER`` 環境変数をサポートする新しい認証バック
  エンドで :doc:`Webサーバーへ認証委任を簡単に行う
  </howto/auth-remote-user>` ことが出来るようになりました。

* 新しく :func:`django.shortcuts.redirect`  関数があるので、オブジクト、
  ビュー名、あるいはURLを簡単にリダクレクトすることができます。

* ``postgresql_psycopg2`` バックエンドは :ref:`PostgreSQLのネィティブ
  autocommit <postgresql-notes>` をサポートすうようになりました。
  これはPostgreSQLに固有の高度な機能ですが、読み込みが主に多いアプリケー
  ションによってはかなり高速になります。

Django 1.1 ロードマップ
==========================

Djagno 1.1 が最終リリースになる前には、少なくとももう１つのプレビュー/開発
リリースがあるでしょう。現在のスケジュールでは少なくともこうなっています:

* 2009年4月2日の週: Django 1.1 リリース候補。この時点で translation にマーク
  された全ての文字列は凍結されるので、最終リリース前に translationが提出され
  ることにないます。 

* 2009年4月13日: Django 1.1 最終リリース。　　


更なるベータ、あるいはリリース候補パッケージが最終1.1リリースの前に出される
ことも考えられます。


あなたが手助けできること
=====================================

良質な 1.1 リリースを提供するためには、助けが必要です。ベータリリースは本番
利用を意図したものでは *ない* ことを繰り返しておきますが、安全なテスト環境で
ベータコードベースを試してみたり、みつけたバグや問題を報告することでDjango
チームを助けることができます。 Djangoチケットトラッカーが顕在する問題を探す
ための中心的な場所です:

* https://code.djangoproject.com/timeline

ぶつかった問題に対応する既存のチケットが無いのであれば新しいチケットをオープ
ンしてください。

さらに、1.1リリースの先のことも含んだ Django 開発の議論は django-developers
メーリングリストで毎日行われています:

* http://groups.google.com/group/django-developers

... また、 ``irc.freenode.net`` にある ``#django-dev`` IRCチャネルでも。
Django開発チームのお手伝いをしたいのであれば、そこに自由に参加してください。

Django のオンライドキュメントでは寄贈の仕方も紹介しています:

* :doc:`Djangoに寄贈するには </internals/contributing/index>`

どのレベルの寄贈も常に歓迎されて評価されます -- コードの開発、ドキュメントの記述
、単にチケットの優先の決定をするとかでもいいですし、提案されたバグフィックスを
テストするのを手伝うなどもあります

またDjango 1.1 の開発スプリントがPyCon US 2009の定められたスプリントデー
( 3月30日から4月2日まで)で行われ、お手伝いしたい人は誰でも参加可能です。
PyConに実際に参加した人でも可能ですし、IRCチャネルやメーリングリストから
バーチャルにも参加可能です。

